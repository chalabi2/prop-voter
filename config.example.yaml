discord:
  token: "YOUR_DISCORD_BOT_TOKEN"
  channel_id: "YOUR_DISCORD_CHANNEL_ID"
  allowed_user_id: "YOUR_DISCORD_USER_ID"

database:
  path: "./prop-voter.db"

security:
  encryption_key: "your-32-char-encryption-key-here"
  vote_secret: "your-secret-phrase-for-voting"

scanning:
  interval: "5m"
  batch_size: 10

health:
  enabled: true
  port: 8080
  path: "/health"

# Binary manager for auto-downloading CLI tools
binary_manager:
  enabled: true
  bin_dir: "./bin"
  check_interval: "24h"
  auto_update: false # Set to true for automatic updates
  backup_old: true

# Key manager for secure wallet key handling
key_manager:
  auto_import: false # Set to true to auto-import keys from key_dir
  key_dir: "./keys"
  backup_keys: true
  encrypt_keys: true

# === CHAIN CONFIGURATION ===
# Prop-Voter supports two configuration formats:
# 1. Chain Registry format (recommended) - simplified config with auto-discovery
# 2. Legacy format - full manual configuration for unsupported chains

chains:
  # === CHAIN REGISTRY FORMAT (RECOMMENDED) ===
  # Just 4 lines per chain! Everything else auto-discovered from official Cosmos Chain Registry

  # Osmosis - Chain Registry format (standard)
  - chain_name: "osmosis" # Chain Registry identifier (case-sensitive)
    rpc: "https://rpc-osmosis.blockapsis.com"
    rest: "https://lcd-osmosis.blockapsis.com"
    wallet_key: "my-osmosis-key"
    authz:
      enabled: true
      granter_addr: "akash1abc123def456ghi789..." # Address to vote on behalf of
      granter_name: "Validator Wallet" # Optional friendly name

    # Auto-discovered: chain_id="osmosis-1", daemon="osmosisd", denom="uosmo",
    #                  prefix="osmo", version, binary_url, logo_url, etc.

  # Juno - Chain Registry format with custom binary URL
  - chain_name: "juno"
    rpc: "https://rpc-juno.blockapsis.com"
    rest: "https://lcd-juno.blockapsis.com"
    wallet_key: "my-juno-key"
    binary_source:
      type: "url" # Override with custom binary URL
      custom_url: "https://github.com/CosmosContracts/juno/releases/download/v27.0.0/junod-linux-amd64"

  # Akash - Chain Registry format with source compilation fallback
  - chain_name: "akash"
    rpc: "https://rpc-akash.blockapsis.com"
    rest: "https://lcd-akash.blockapsis.com"
    wallet_key: "my-akash-key"
    binary_source:
      compile_from_source: true # Just this! Auto-detects repo, version, build command

  # Stargaze - Chain Registry format
  - chain_name: "stargaze"
    rpc: "https://rpc-stargaze.blockapsis.com"
    rest: "https://lcd-stargaze.blockapsis.com"
    wallet_key: "my-stargaze-key"

    # Chihuahua - Multiple approaches for Go version compatibility
  - chain_name: "chihuahua"
    rpc: "https://rpc-chihuahua.blockapsis.com"
    rest: "https://lcd-chihuahua.blockapsis.com"
    wallet_key: "my-chihuahua-key"
    binary_source:
      type: "source" # Auto-detects: repo from Chain Registry, latest version, make install
      ignore_go_version: true # Allow newer Go versions (bypass Go 1.20 requirement)
      # Alternative approaches (choose one):
      # build_command: "SKIP_GO_VERSION_CHECK=1 make install"  # Env var bypass
      # build_command: "go install -mod=readonly ./cmd/chihuahuad"  # Direct Go build

  # OmniFlix - Even more minimal (will auto-fallback to source compilation)
  - chain_name: "omniflixhub"
    rpc: "https://rpc-omniflix.blockapsis.com"
    rest: "https://lcd-omniflix.blockapsis.com"
    wallet_key: "my-omniflix-key"
    # No binary_source needed! Will try registry/github first, then auto-compile

  # === LEGACY FORMAT ===
  # Use this format for chains not in the Chain Registry or when you need full control

  # Cosmos Hub - Legacy format (for servers with binary compatibility issues)
  - name: "Cosmos Hub"
    chain_id: "cosmoshub-4"
    rpc: "https://rpc-cosmoshub.blockapsis.com"
    rest: "https://lcd-cosmoshub.blockapsis.com"
    denom: "uatom"
    prefix: "cosmos"
    cli_name: "gaiad"
    wallet_key: "my-cosmos-key"
    logo_url: "https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/images/atom.png"
    binary_repo:
      enabled: false # Disable if binary has compatibility issues
      owner: "cosmos"
      repo: "gaia"
      asset_pattern: "*linux-amd64*" # Adjust for your platform


  # Custom chain - Legacy format
  # - name: "Custom Chain"
  #   chain_id: "custom-1"
  #   rpc: "https://rpc-custom.example.com"
  #   rest: "https://lcd-custom.example.com"
  #   denom: "ucustom"
  #   prefix: "custom"
  #   cli_name: "customd"
  #   wallet_key: "my-custom-key"
  #   logo_url: "https://example.com/custom-logo.png"
  #   binary_repo:
  #     enabled: true
  #     owner: "custom-org"
  #     repo: "custom-chain"
  #     asset_pattern: "*linux-amd64*"
# === BINARY SOURCE CONFIGURATION ===
# Prop-Voter supports multiple ways to obtain chain binaries:

# 1. Chain Registry (type: "registry" or omit type)
#    - Auto-downloads from Chain Registry binary URLs
#    - Falls back to GitHub releases if no URL available
#    - Default for chains using chain_name

# 2. GitHub Releases (type: "github")
#    - Downloads from GitHub releases using asset patterns
#    - Good for legacy configs or custom repos

# 3. Custom URL (type: "url")
#    - Downloads directly from a specified URL
#    - Useful for specific binary versions or custom builds
#    binary_source:
#      type: "url"
#      custom_url: "https://example.com/path/to/binary"

# 4. Source Compilation (type: "source")
#    - Clones repository and compiles from source
#    - Best for chains without pre-compiled binaries
#    - MINIMAL CONFIG: Just set type: "source" - everything else auto-detected!
#    binary_source:
#      type: "source" # Auto-detects repo, version, build command, target
#      # Optional overrides:
#      # source_repo: "https://github.com/org/repo" # Auto-detected from Chain Registry
#      # source_branch: "v1.0.0" # Auto-detected from Chain Registry version
#      # build_command: "make install" # Default, can override with "make build"
#      # build_target: "chaind" # Auto-detected from Chain Registry daemon name

# 5. Fallback Compilation (compile_from_source: true)
#    - Tries normal download first, compiles if that fails
#    - SUPER MINIMAL: Just one line enables smart fallback!
#    binary_source:
#      compile_from_source: true # That's it! Everything else auto-detected

# 6. Automatic Fallback (NO CONFIG NEEDED!)
#    - For Chain Registry chains, source compilation is AUTOMATIC fallback
#    - If binary download fails, it auto-compiles from Chain Registry repo
#    - Zero configuration required!

# 7. Go Version Management
#    - Automatically detects Go version compatibility issues
#    - Provides helpful suggestions for installation or PATH updates
#    - Multiple bypass options for flexibility:
#    binary_source:
#      ignore_go_version: true # Smart bypass (tries env vars, then direct go build)
#      build_command: "SKIP_GO_VERSION_CHECK=1 make install" # Explicit env var
#      build_command: "go install -mod=readonly ./cmd/daemon" # Direct go build
#      required_go_version: "go1.21" # Override detected requirement

# Binary source options work with both Chain Registry and legacy formats.
# Source compilation requires git, make, and Go to be installed on the system.

# === SUPPORTED CHAIN REGISTRY CHAINS ===
# Use these exact chain_name values for Chain Registry format:
# cosmoshub, osmosis, juno, akash, kujira, stargaze, injective, stride, evmos,
# kava, secret, terra2, persistence, sommelier, gravity-bridge, crescent,
# chihuahua, comdex, desmos, regen, sentinel, cyber, iris, fetchai, archway,
# neutron, noble, composable, saga, dymension, celestia, and many more!
#
# Get the complete list: ./prop-voter -registry list
